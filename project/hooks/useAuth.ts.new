import { useState } from 'react';
import { Alert } from 'react-native';
import { FirebaseError } from 'firebase/app';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '@/config/firebase';

// Custom error types
export class CustomAuthError extends Error {
  constructor(message: string, public code?: string) {
    super(message);
    this.name = 'CustomAuthError';
  }
}

export function useAuth() {
  const [loading, setLoading] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);

  const login = async (email: string, password: string) => {
    if (!email || !password) {
      setAuthError('Please enter both email and password');
      return;
    }

    setLoading(true);
    try {
      await signInWithEmailAndPassword(auth, email, password);
      setAuthError(null);
    } catch (error) {
      console.error('Login error:', error);
      const firebaseError = error as FirebaseError;
      let errorMessage = 'Failed to login. Please try again.';
      
      switch (firebaseError.code) {
        case 'auth/user-not-found':
        case 'auth/wrong-password':
          errorMessage = 'Invalid email or password';
          break;
        case 'auth/too-many-requests':
          errorMessage = 'Too many failed attempts. Please try again later';
          break;
        case 'auth/user-disabled':
          errorMessage = 'This account has been disabled';
          break;
        case 'auth/invalid-email':
          errorMessage = 'Invalid email format';
          break;
      }
      
      setAuthError(errorMessage);
      Alert.alert('Error', errorMessage);
      throw new CustomAuthError(errorMessage, firebaseError.code);
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    authError,
    login
  };
}
